// Code generated by MockGen. DO NOT EDIT.
// Source: message.go
//
// Generated by this command:
//
//	mockgen -source=message.go -destination=mocks/BrokerCacheMock.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	domain "2024-spring-ab-go-hw-3-g0r0d3tsky/chat/internal/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBroker is a mock of Broker interface.
type MockBroker struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerMockRecorder
}

// MockBrokerMockRecorder is the mock recorder for MockBroker.
type MockBrokerMockRecorder struct {
	mock *MockBroker
}

// NewMockBroker creates a new mock instance.
func NewMockBroker(ctrl *gomock.Controller) *MockBroker {
	mock := &MockBroker{ctrl: ctrl}
	mock.recorder = &MockBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBroker) EXPECT() *MockBrokerMockRecorder {
	return m.recorder
}

// Push mocks base method.
func (m *MockBroker) Push(topic string, message *domain.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", topic, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockBrokerMockRecorder) Push(topic, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockBroker)(nil).Push), topic, message)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// GetMessages mocks base method.
func (m *MockCache) GetMessages(ctx context.Context, amount int) ([]*domain.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", ctx, amount)
	ret0, _ := ret[0].([]*domain.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockCacheMockRecorder) GetMessages(ctx, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockCache)(nil).GetMessages), ctx, amount)
}

// SetMessages mocks base method.
func (m *MockCache) SetMessages(ctx context.Context, messages []*domain.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMessages", ctx, messages)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMessages indicates an expected call of SetMessages.
func (mr *MockCacheMockRecorder) SetMessages(ctx, messages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMessages", reflect.TypeOf((*MockCache)(nil).SetMessages), ctx, messages)
}
